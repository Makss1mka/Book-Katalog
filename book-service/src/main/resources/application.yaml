spring:
  services:
    user-service-url: http://user-service:8086
  kafka:
    listener:
      ack-mode: manual
    bootstrap-servers: kafka:9092
    topics:
      status-update: "status-update"
      status-create: "status-create"
      status-delete: "status-delete"
      like-create: "like-create"
      like-delete: "like-delete"
      new-visit: "new-visit"
    consumer:
      group-id: book-service
      auto-offset-reset: earliest
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "java.util,java.lang,maksim.booksservice,maksim.kafkaclient.dtos"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    admin:
      auto-create: true
      properties:
        replication-factor: 1
        num-partitions: 3
  application:
    upload_visits_size: 500
    name: book-service
    book-files-directory: "app/statics/"
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: false


management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      probes:
        enabled: true


server:
  port: 8084


eureka:
  client:
    serviceUrl:
      defaultZone: "http://eureka-server:8081/eureka"
