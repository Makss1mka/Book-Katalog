name: Build and Deploy Microservices

on:
  push:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  MAVEN_OPTS: -Dmaven.repo.local=${{ github.workspace }}/.m2/repository

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.changed_files.outputs.changed_dirs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get changed directories
      id: changed_files
      run: |
        changed_dirs=$(git diff --name-only HEAD^ HEAD | awk -F'/' '{print $1}' | sort | uniq | grep -E '^(book-service|user-service|review-service|visit-service|auth-service|frontend)' || echo "")
        echo "changed_dirs<<EOF" >> $GITHUB_OUTPUT
        echo "$changed_dirs" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Set up JDK 23
      uses: actions/setup-java@v3
      with:
        java-version: '23'
        distribution: 'temurin'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-

  build-kafka-client:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Restore Maven cache
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-
    
    - name: Build and install Kafka Client
      working-directory: ./kafka-client
      run: |
        mvn clean install -DskipTests
        echo "kafka-client installed to local Maven repo"

  build-and-deploy-microservices:
    needs: [setup, build-kafka-client]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['book-service', 'user-service', 'review-service', 'visit-service', 'auth-service']
        include:
          - service: book-service
          - service: user-service
          - service: review-service
          - service: visit-service
          - service: auth-service
      max-parallel: 5
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Check if service changed
      id: check_changes
      run: |
        if echo "${{ needs.setup.outputs.changed_dirs }}" | grep -wq "${{ matrix.service }}"; then
          echo "service_changed=true" >> $GITHUB_OUTPUT
        else
          echo "service_changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Checkout code
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: actions/checkout@v4
    
    - name: Restore Maven cache
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-
    
    - name: Set up JDK 23
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: actions/setup-java@v3
      with:
        java-version: '23'
        distribution: 'temurin'
    
    - name: Login to Docker Hub
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}
    
    - name: Build and push microservice
      if: steps.check_changes.outputs.service_changed == 'true'
      working-directory: ./${{ matrix.service }}
      run: mvn clean install
    
    - name: Authenticate to Google Cloud
      if: steps.check_changes.outputs.service_changed == 'true'
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GKE_KEY }}
      run: |
        echo "$GOOGLE_APPLICATION_CREDENTIALS" > gcloud-key.json
        gcloud auth activate-service-account --key-file=gcloud-key.json
        echo %DB_URL%
        echo %DB_USERNAME%
        exho %DB_PASSWORD%


    - name: Install gke-gcloud-auth-plugin
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: gke-gcloud-auth-plugin

    - name: Connect to GKE cluster
      if: steps.check_changes.outputs.service_changed == 'true'
      id: connect
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ env.GKE_PROJECT }}

        kubectl cluster-info
        kubectl get nodes
        echo "kubeconfig=$(cat ~/.kube/config | base64 -w0)" >> $GITHUB_OUTPUT

    - name: Deploy to Kubernetes
      if: steps.check_changes.outputs.service_changed == 'true'
      run: |
        kubectl apply -f ./${{ matrix.service }}/deployment.yaml
        kubectl apply -f ./${{ matrix.service }}/service.yaml

  build-and-deploy-frontend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Check if service changed
      id: check_changes
      run: |
        if echo "${{ needs.setup.outputs.changed_dirs }}" | grep -wq "frontend"; then
          echo "service_changed=true" >> $GITHUB_OUTPUT
        else
          echo "service_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout code
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}
    
    - name: Build and push frontend
      if: steps.check_changes.outputs.service_changed == 'true'
      working-directory: ./frontend
      run: |
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/static-nginx:latest .
        docker push ${{ env.DOCKER_HUB_USERNAME }}/static-nginx:latest

    - name: Authenticate to Google Cloud
      if: steps.check_changes.outputs.service_changed == 'true'
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GKE_KEY }}
      run: |
        echo "$GOOGLE_APPLICATION_CREDENTIALS" > gcloud-key.json
        gcloud auth activate-service-account --key-file=gcloud-key.json

    - name: Install gke-gcloud-auth-plugin
      if: steps.check_changes.outputs.service_changed == 'true'
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: gke-gcloud-auth-plugin

    - name: Connect to GKE cluster
      if: steps.check_changes.outputs.service_changed == 'true'
      id: connect
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ env.GKE_PROJECT }}

        kubectl cluster-info
        kubectl get nodes
        echo "kubeconfig=$(cat ~/.kube/config | base64 -w0)" >> $GITHUB_OUTPUT

    - name: Deploy frontend to Kubernetes
      if: steps.check_changes.outputs.service_changed == 'true'
      run: |
        kubectl apply -f ./frontend/static-nginx-deployment.yaml
        kubectl apply -f ./frontend/static-nginx-service.yaml


